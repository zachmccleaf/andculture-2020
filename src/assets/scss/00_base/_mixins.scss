/*------------------------------------*\
	MIXINS
\*------------------------------------*/

@mixin animation($value) {
    -webkit-animation: $value;
    -moz-animation: $value;
    animation: $value;
}

@mixin keyframes($name) {
    @-webkit-keyframes #{$name} {
        @content;
    }

    @-moz-keyframes #{$name} {
        @content;
    }

    @-ms-keyframes #{$name} {
        @content;
    }

    @keyframes #{$name} {
        @content;
    }
}

@mixin transform($value) {
    -webkit-transform: $value;
    -moz-transform: $value;
    transform: $value;
}

@mixin icon-shadow($color) {
    text-shadow: 0 4px 16px $color;
}

@mixin site-container() {
    @include grid-container;
    margin: 0 auto;
    max-width: 1180px;
    position: relative;
}

@mixin fixedViewHeightScrollY {
    height: 100vh;
    overflow-y: scroll;
}

// Font Mixins
// -------------------------------

@mixin font-style(
    $family: $font-primary,
    $size: "base",
    $color: false,
    $weight: 400,
    $line-height: false
) {
    @include font-size($size);
    font-family: $family;
    font-weight: $weight;

    @if $color {
        color: $color;
    }
    @if $line-height {
        line-height: $line-height;
    }
}

@mixin font-size($size: "base") {
    @include rem-fallback(font-size, get-font-size($size));
}

@mixin line-height($size: "base") {
    @include rem-fallback(line-height, get-line-height($size));
}

@mixin heading-size($size: "h1") {
    @include rem-fallback(font-size, get-heading-size($size));
}

// Responsive Styles
// --------------------------

@mixin non-retina {
    @media not screen and (-webkit-min-device-pixel-ratio: 2),
        not screen and (min--moz-device-pixel-ratio: 2),
        not screen and (-o-min-device-pixel-ratio: 2/1),
        not screen and (min-device-pixel-ratio: 2),
        not screen and (min-resolution: 192dpi),
        not screen and (min-resolution: 2dppx) {
        @content;
    }
}

@mixin breakpoints($from: none, $to: none, $media: all) {
    // Set some empty min + max values
    $min-width: null;
    $max-width: null;
  
    // Determine 'from' min-width value
    @if (type-of($from) == string) and (map-has-key($breakpoints, $from)) {
      // If value is a string listed in the named breakpoints map
      $min-width: map-get($breakpoints, $from);
    }
    @else if ((type-of($from) == number) and (unitless($from) == false)) {
      // If value is a number with a unit
      $min-width: $from;
    }
    @else if ($from == none) {
      // If the value is blank
      $min-width: false;
    }
    @else {
      // If none are true, display compile error
      @error '`breakpoints()` min-width value `#{$from}` was not found.';
    }
  
    // Determine 'to' max-width value
    @if (type-of($to) == string) and (map-has-key($breakpoints, $to)) {
      // If value is a string listed in the named breakpoints map
      $max-width: map-get($breakpoints, $to);
    }
    @else if ((type-of($to) == number) and (unitless($to) == false)) {
      // If value is a number with a unit
      $max-width: $to;
    }
    @else if ($to == none) {
      // If the value is blank
      $max-width: false;
    }
    @else {
      // If none are true, display compile error
      @error '`breakpoints()` max-width value `#{$to}` was not found.';
    }
  
    // If both min-width & max-width values:
    @if ($min-width != false) AND ($max-width != false) {
      // Increment min-width value by 1px
      $min-width: $min-width + 1px;
      @media #{$media} and (min-width: #{$min-width}) and (max-width: #{$max-width}) {
        // breakpoint mixin content:
        @content;
      }
    }
    // If only the min-width value is set:
    @else if ($min-width != false) {
      // Increment min-width value by 1px
      $min-width: $min-width + 1px;
      @media #{$media} and (min-width: #{$min-width}) {
        // breakpoint mixin content:
        @content;
      }
    }
    // If only the max-width value is set:
    @else if ($max-width != false) {
      @media #{$media} and (max-width: #{$max-width}) {
        // breakpoint mixin content:
        @content;
      }
    }
    // If min-width & max-width are empty, but special media type set:
    @else if ($media != all) {
      @media #{$media} {
        // breakpoint mixin content:
        @content;
      }
    }
    // If no custom media query values are set:
    @else {
      // Thanks for playing
      @content;
    }
  }

@mixin retina {
    @media only screen and (-webkit-min-device-pixel-ratio: 2),
        only screen and (min--moz-device-pixel-ratio: 2),
        only screen and (-o-min-device-pixel-ratio: 2/1),
        only screen and (min-device-pixel-ratio: 2),
        only screen and (min-resolution: 192dpi),
        only screen and (min-resolution: 2dppx) {
        @content;
    }
}

@mixin clearfix {
    &:before,
    &:after {
        content: " ";
        display: table;
    }

    &:after {
        display: block;
        clear: both;
        height: 1px;
        margin-top: -1px;
        visibility: hidden;
    }

    & {
        *zoom: 1;
    }
}

@mixin clearlist {
    list-style-type: none;
    margin: 0;
    padding: 0;
}

// REM Mixins
// -------------------------------

@mixin rem-fallback($property, $values...) {
    $max: length($values);
    $pxValues: "";
    $remValues: "";

    @for $i from 1 through $max {
        $value: strip-unit(nth($values, $i));
        $pxValues: #{$pxValues + $value}px;

        @if $i < $max {
            $pxValues: #{$pxValues + " "};
        }
    }

    @for $i from 1 through $max {
        $value: strip-unit(nth($values, $i));
        $remValues: #{$remValues + (rem($value))};

        @if $i < $max {
            $remValues: #{$remValues + " "};
        }
    }

    #{$property}: $pxValues;
    #{$property}: $remValues;
}

// Box Model
// -------------------------------

@mixin margin($values...) {
    @include rem-fallback(margin, $values...);
}

@mixin margin-bottom($value) {
    @include rem-fallback(margin-bottom, $value);
}

@mixin margin-left($value) {
    @include rem-fallback(margin-left, $value);
}

@mixin margin-right($value) {
    @include rem-fallback(margin-right, $value);
}

@mixin margin-top($value) {
    @include rem-fallback(margin-top, $value);
}

@mixin padding($values...) {
    @include rem-fallback(padding, $values...);
}

@mixin padding-bottom($value) {
    @include rem-fallback(padding-bottom, $value);
}

@mixin padding-left($value) {
    @include rem-fallback(padding-left, $value);
}

@mixin padding-right($value) {
    @include rem-fallback(padding-right, $value);
}

@mixin padding-top($value) {
    @include rem-fallback(padding-top, $value);
}
@mixin border-box {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}

@mixin border-radius($size) {
    @if ($size == "large") {
        border-radius: 8px;
    }
    @if ($size == "base") {
        border-radius: 5px;
    }
}

// Inputs
// -------------------------------

@mixin placeholder {
    &::-webkit-input-placeholder {
        @content;
    }
    &:-moz-placeholder {
        @content;
    }
    &::-moz-placeholder {
        @content;
    }
    &:-ms-input-placeholder {
        @content;
    }
}
